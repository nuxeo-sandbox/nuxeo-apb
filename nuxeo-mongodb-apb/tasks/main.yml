---

#############################################################################
# Provision nuxeo-mongodb
#############################################################################

- name: "Update last operation"
  asb_last_operation:
    description: "0%: Starting"
  when: in_cluster

- name: 'Determine cluster type'
  command: oc version
  register: oc_version
  ignore_errors: yes

- name: 'Set Facts'
  set_fact:
    cluster: "{{ 'openshift' if 'openshift' in oc_version.stdout else 'kubernetes' }}"

- name: "create ca cert and key files"
  include_tasks: "create_ca_cert_key.yml"
  when: tls_enabled

- name: "set fact statefulset pvcs state={{ state }}"
  include_tasks: "set_fact_statefulset_pvcs.yml"
  when: state == 'absent'

- name: "set broker objects state={{ state }}"
  include_tasks: "set_broker_object_state.yml name={{item.name}} desc={{item.desc}}"
  when: item.apply | default(True)
  loop:
    - name: 'ca_secret'
      desc: 'ca secret'
      apply: "{{ tls_enabled }}"
    - name: 'admin_secret'
      desc: 'admin secret'
      apply: "{{ auth_enabled and auth_existingAdminSecret is undefined }}"
    - name: 'init_configmap'
      desc: 'init container config map'
    - name: 'mongodb_configmap'
      desc: 'mongodb container config map'
    - name: 'poddisruptionbudget'
      desc: 'poddisruptionbudget'
      apply: "{{ podDisruptionBudget is defined and (podDisruptionBudget | from_yaml) }}"
    - name: 'service'
      desc: 'service'
    - name: 'statefulset'
      desc: 'statefulset'

- name: "statefulset persistentvolumeclaims state={{ state }}"
  shell: kubectl delete --ignore-not-found=true persistentvolumeclaim {{ item }} -n {{ namespace }}
  with_items: "{{ statefulset_pvcs }}"
  when: state == 'absent'

- name: "Update last operation"
  asb_last_operation:
    description: "50%: Cluster objects state={{ state }}"
  when: in_cluster

- name: "Wait for statefulset to become ready"
  debug:
    msg: "StatefulSet ready status: {{ statefulset_query }}"
  retries: 20
  delay: 10
  until:
    - statefulset_query
  when: state == 'present'

- name: "set fact statefulset pvcs state={{ state }}"
  include_tasks: "set_fact_statefulset_pvcs.yml"
  when: state == "present"

- name: "set fact service_uri state={{ state }}"
  include_tasks: "set_fact_service_uri.yml"
  when: state == "present"

- name: encode bind credentials
  asb_encode_binding:
    fields:
      uri: "{{ service_uri }}"
      tls_cacert: "{{ tls_cacert_lookup | b64encode }}"
  when: in_cluster and state == 'present'

- name: "Update last operation"
  asb_last_operation:
    description: "100%: Done"
  when: in_cluster
