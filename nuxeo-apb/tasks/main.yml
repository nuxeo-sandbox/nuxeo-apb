
- name: "Update last operation"
  asb_last_operation:
    description: "0%: Starting"
  when: in_cluster

# Work-around k8s_raw inability to create Secret directly
- name: "Admin user secret state={{ state }}"
  block:
    - name: "Create Admin user secret from template"
      template:
        src: admin_secret.yml.j2
        dest: /tmp/admin_secret.yml

    - name: "Create Admin secret"
      shell: kubectl create --filename=/tmp/admin_secret.yml
  when: state == "present" and auth_existingAdminSecret is undefined

- name: "admin secret state={{ state }}"
  shell: kubectl delete --ignore-not-found=true secret {{ admin_secret_name }} -n {{ namespace }}
  when: state == "absent" and auth_existingAdminSecret is undefined


# Work-around k8s_raw inability to create Secret directly
- name: "Connect secret state={{ state }}"
  block:
    - name: "Create Connect secret from template"
      template:
        src: connect_secret.yml.j2
        dest: /tmp/connect_secret.yml

    - name: "Create user secret"
      shell: kubectl create --filename=/tmp/connect_secret.yml
  when: state == "present" and connectEnabled and auth_existingUserSecret is undefined

- name: "user secret state={{ state }}"
  shell: kubectl delete --ignore-not-found=true secret {{ connect_secret_name }} -n {{ namespace }}
  when: state == "absent" and connectEnabled and existingConnnectSecret is undefined


# Work-around k8s_raw inability to create ConfigMap directly
- name: "Nuxeo container config map state={{ state }}"
  block:
    - name: "Create queue config file names"
      set_fact:
        interactive_queues_config_path: "/tmp/interactive-queues-config.xml"
        worker_queues_config_path: "/tmp/worker-queue-config.xml"
    - name: "Generate interactive queues config for Nuxeo from templates"
      template:
        src: queues-config.xml.j2
        dest: "{{ interactive_queues_config_path }}"
      vars:
        # We don't disable queues if we have no worker
        disabledQueues: "{{ interactiveNodesDisabledQueues if has_workers else [] }}"
    - name: "Generate worker queues config for Nuxeo from templates"
      template:
        src: queues-config.xml.j2
        dest: "{{ worker_queues_config_path }}"
      vars:
        disabledQueues: "{{ workerNodesDisabledQueues }}"
    - name: "Create Nuxeo container config from template"
      template:
        src: nuxeo_config.yml.j2
        dest: /tmp/nuxeo_config.yml

    - name: "Create Nuxeo container config map"
      shell: kubectl create --filename=/tmp/nuxeo_config.yml
  when: state == "present"

- name: "Nuxeo container config map state={{ state }}"
  shell: kubectl delete --ignore-not-found=true configmap {{ init_configmap_name }} -n {{ namespace }}
  when: state == "absent"


# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Nuxeo service state={{ state }}"
  block:
    - name: "Create Nuxeo service from template"
      template:
        src: nuxeo_service.yml.j2
        dest: /tmp/nuxeo_service.yml

    - name: "Create service"
      shell: kubectl create --filename=/tmp/nuxeo_service.yml
  when: state == "present"

- name: "Nuxeo service state={{ state }}"
  shell: kubectl delete --ignore-not-found=true service {{ service_name }} -n {{ namespace }}
  when: state == "absent"

# Work-around k8s_raw inability to create ConfigMap directly
- name: "Nuxeo route state={{ state }}"
  block:
    - name: "Create Nuxeo route from template"
      template:
        src: nuxeo_route.yml.j2
        dest: /tmp/nuxeo_route.yml

    - name: "Create Nuxeo route"
      shell: oc create --filename=/tmp/nuxeo_route.yml
  when:
    - cluster == "openshift"
    - state == "present"

- name: "Nuxeo route state={{ state }}"
  shell: oc delete --ignore-not-found=true route {{ route_name }} -n {{ namespace }}
  when:
    - cluster == "openshift"
    - state == "absent"


- name: "set pvc state={{ state }}"
  include_tasks: "set_broker_object_state.yml
      name=pvc
      desc={{ item.desc }}
      pvc_name={{ item.pvc_name }}
      persistentVolume_annotations={{ item.persistentVolume_annotations }}
      persistentVolume_accessMode={{ item.persistentVolume_accessMode }}
      persistentVolume_size={{ item.persistentVolume_size }}
      persistentVolume_storageClass={{ item.persistentVolume_storageClass }}"
  when: item.apply | default(True)
  loop:
    - desc: 'binaries pvc'
      pvc_name: "{{ binaries_pvc_name }}"
      persistentVolume_annotations: "{{ binaries_persistentVolume_annotations }}"
      persistentVolume_accessMode: "{{ binaries_persistentVolume_accessMode }}"
      persistentVolume_size: "{{ binaries_persistentVolume_size }}"
      persistentVolume_storageClass: "{{ binaries_persistentVolume_storageClass }}"
      apply: "{{ binaries_persistentVolume_enabled }}"
    - desc: 'transientstore pvc'
      pvc_name: "{{ transientstore_pvc_name }}"
      persistentVolume_annotations: "{{ transientstore_persistentVolume_annotations }}"
      persistentVolume_accessMode: "{{ transientstore_persistentVolume_accessMode }}"
      persistentVolume_size: "{{ transientstore_persistentVolume_size }}"
      persistentVolume_storageClass: "{{ transientstore_persistentVolume_storageClass }}"
      apply: "{{ transientstore_persistentVolume_enabled }}"
    - desc: 'data pvc'
      pvc_name: "{{ data_pvc_name }}"
      persistentVolume_annotations: "{{ data_persistentVolume_annotations }}"
      persistentVolume_accessMode: "{{ data_persistentVolume_accessMode }}"
      persistentVolume_size: "{{ data_persistentVolume_size }}"
      persistentVolume_storageClass: "{{ data_persistentVolume_storageClass }}"
      apply: "{{ data_persistentVolume_enabled }}"


- name: "MongoDB service binding ={{ state }}"
  include_tasks: "bind_mongodb.yml"
  when: useExternalMongoDB

- name: "Elasticsearch service binding ={{ state }}"
  include_tasks: "bind_elasticsearch.yml"
  when: useExternalElasticsearch

- name: "Kafka service binding ={{ state }}"
  include_tasks: "bind_kafka.yml"
  when: useKafkaForStream


# Work-around k8s_raw inability to create ConfigMap directly
- name: "Nginx configuration ={{ state }}"
  include_tasks: "create_nginx_conf.yml"
  when: use_front_ssl_proxy

- name: "Nuxeo Deployment Config interactive state={{ state }}"
  block:
    - name: "Create Nuxeo Deployment config from template"
      template:
        src: nuxeo_dc.yml.j2
        dest: /tmp/nuxeo_dc_interactive.yml
      vars:
        nuxeo_type: "interactive"

    - name: "Create Nuxeo Deployment Config interactive"
      shell: oc create --filename=/tmp/nuxeo_dc_interactive.yml
  when:
    - cluster == "openshift"
    - state == "present"

- name: "Nuxeo Deployment Config interactive={{ state }}"
  shell: oc delete --ignore-not-found=true dc {{ interactive_dc_name }} -n {{ namespace }}
  when:
    - cluster == "openshift"
    - state == "absent"


- name: "Nuxeo Deployment Config worker state={{ state }}"
  block:
    - name: "Create Nuxeo Deployment config from template"
      template:
        src: nuxeo_dc.yml.j2
        dest: /tmp/nuxeo_dc_worker.yml
      vars:
        nuxeo_type: "worker"

    - name: "Create Nuxeo Deployment Config worker"
      shell: oc create --filename=/tmp/nuxeo_dc_worker.yml
  when:
    - cluster == "openshift"
    - state == "present"

- name: "Nuxeo Deployment Config worker={{ state }}"
  shell: oc delete --ignore-not-found=true dc {{ worker_dc_name }} -n {{ namespace }}
  when:
    - cluster == "openshift"
    - state == "absent"


- name: "Update last operation"
  asb_last_operation:
    description: "50%: Cluster objects state={{ state }}"
  when: in_cluster

- include_tasks: "verify_{{ apb_action }}.yml"

- name: "Update last operation"
  asb_last_operation:
    description: "100%: Done"
  when: in_cluster
