apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ name }}
    apb_name: '{{ apb_name }}'
    apb_plan_id: '{{ _apb_plan_id }}'
    apb_service_class_id: '{{ _apb_service_class_id }}'
    apb_service_instance_id: '{{ _apb_service_instance_id }}'
    component: {{ component }}
    nuxeo_type: {{ nuxeo_type }}
  namespace: {{ namespace }}
{% if nuxeo_type == "interactive" %}
  name: {{ interactive_dc_name }}
{% endif %}
{% if nuxeo_type == "worker" %}
  name: {{ worker_dc_name }}
{% endif %}
spec:
{% if deploymentStrategy is defined and (deploymentStrategy | from_yaml) %}
  strategy:
{{ deploymentStrategy | from_yaml | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
{% if nuxeo_type == "interactive" %}
  replicas: {{ interactive_replicas }}
{% endif %}
{% if nuxeo_type == "worker" %}
  replicas: {{ worker_replicas }}
{% endif %}

  selector:
    app: {{ name }}
    component: nuxeo
    nuxeo_type: {{ nuxeo_type }}
    deploymentconfig: {{ name }}-{{ nuxeo_type }}

  template:
    metadata:
      labels:
        app: {{ name }}
        component: nuxeo
        nuxeo_type: {{ nuxeo_type }}
        deploymentconfig: {{ name }}-{{ nuxeo_type }}
{% if podAnnotations is defined and (podAnnotations | from_yaml) %}
      annotations:
{{ podAnnotations | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
    spec:
{% if securityContext is defined and (securityContext | from_yaml) %}
      securityContext:
{{ securityContext | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}

    spec:
      containers:
{% if use_front_ssl_proxy and nuxeo_type == "interactive" %}
      - name: nginx
        # TODO Bake a nuxeo image and allow parametrization
        image: nginx
        volumeMounts:
          - name: nginx-cert
            readOnly: true
            mountPath: "/etc/secrets/"
          - name: nginx-conf
            readOnly: true
            mountPath: "/etc/nginx/"
          - name: nginx-cache
            mountPath: "/var/cache/nginx"
          - name: nginx-tmp
            mountPath: "/var/tmp"
        ports:
        - containerPort: 8443
          protocol: TCP
{% endif %}
      - image: {{ image_repository }}:{{ image_tag }}
        imagePullPolicy: {{ image_pullPolicy }}
        livenessProbe:
          httpGet:
            path: /nuxeo/runningstatus
            port: 8080
            scheme: HTTP
          initialDelaySeconds: {{ livenessProbe_initialDelaySeconds }}
          timeoutSeconds: {{ livenessProbe_timeoutSeconds }}
          failureThreshold: {{ livenessProbe_failureThreshold }}
          periodSeconds: {{ livenessProbe_periodSeconds }}
          successThreshold: {{ livenessProbe_successThreshold }}
        readinessProbe:
          httpGet:
            path: /nuxeo/runningstatus
            port: 8080
            scheme: HTTP
          initialDelaySeconds: {{ readinessProbe_initialDelaySeconds }}
          timeoutSeconds: {{ readinessProbe_timeoutSeconds }}
          failureThreshold: {{ readinessProbe_failureThreshold }}
          periodSeconds: {{ readinessProbe_periodSeconds }}
          successThreshold: {{ readinessProbe_successThreshold }}
        name: nuxeo
        env:
{% if nuxeo_type == "worker" %}
        - name: IS_WORKER
          value: "1"
{% endif %}
{% if nuxeoJavaOpts is defined and nuxeoJavaOpts != "" %}
        - name: JAVA_OPTS
          value: "{{ nuxeoJavaOpts }}"
{% endif %}
{% if (nuxeoJavaOpts is not defined or nuxeoJavaOpts != "") and resources is defined %}
        # Limit the JVM to the CGroup limits.
        - name: JAVA_OPTS
          value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1 -Djavax.net.ssl.trustStore=/var/lib/nuxeo/data/cacerts -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.keyStoreType=jks"
{% endif %}
        - name: NUXEO_TEMPLATES
          value: "default{% if useExternalMongoDB %},mongodb,mongodb-audit{% endif %}{% if nuxeoTemplates != ""%},{{nuxeoTemplates}}{% endif %}"
{% if nuxeoPackages is defined %}
        - name: NUXEO_PACKAGES
          value: {{ nuxeoPackages }}
{% endif %}
{% if binaries_persistentVolume_enabled %}
        - name: NUXEO_BINARY_STORE
          value: /var/lib/nuxeo/binaries
{% endif %}
{% if transientstore_persistentVolume_enabled %}
        - name: NUXEO_TRANSIENT_STORE
          value: /var/lib/nuxeo/transientstore
{% endif %}
        - name: NUXEO_URL
          value: {{ applicationUrl }}
{% if extraVars is defined and (extraVars | from_yaml) %}
{{ extraVars | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
        # TODO add params base on defined backends (Mongo, ES, Kafka)
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
{% if resources is defined and (resources | from_yaml) %}
{{ resources | from_yaml | to_nice_yaml(indent=2) | indent(10, true) }}
{% endif %}
        volumeMounts:
{% if binaries_persistentVolume_enabled %}
        - name: binaries
          mountPath: /var/lib/nuxeo/binaries
{% endif %}
{% if transientstore_persistentVolume_enabled %}
        - name: transientstore
          mountPath: /var/lib/nuxeo/transientstore
{% endif %}
        - name: data
          mountPath: /var/lib/nuxeo/data
        - name: nuxeotmp
          mountPath: /opt/nuxeo/server/tmp
        - name: nuxeoconf
          mountPath: /docker-entrypoint-initnuxeo.d
{% if connectEnabled %}
        - name: connect-secret
          mountPath: /opt/nuxeo/connect
{% endif %}
{% if useExternalMongoDB %}
        - name: mongodb-credentials
          mountPath: /opt/nuxeo/bindings/mongodb
{% endif %}
{% if useExternalElasticsearch %}
        - name: elasticsearch-credentials
          mountPath: /opt/nuxeo/bindings/elasticsearch
{% endif %}
{% if useKafkaForStream %}
        - name: kafka-credentials
          mountPath: /opt/nuxeo/bindings/kafka
{% endif %}
      volumes:
{% if binaries_persistentVolume_enabled %}
      - name: binaries
        persistentVolumeClaim:
          claimName: {{ binaries_pvc_name }}
{% endif %}
{% if transientstore_persistentVolume_enabled %}
      - name: transientstore
        persistentVolumeClaim:
          claimName: {{ transientstore_pvc_name }}
{% endif %}
      - name: data
{% if data_persistentVolume_enabled %}
        persistentVolumeClaim:
          claimName: {{ data_pvc_name }}
{% else %}
        emptyDir: {}
{% endif %}
      - name: nuxeotmp
        emptyDir: {}
      - name: nuxeoconf
        configMap:
          name: {{ init_configmap_name }}
{% if connectEnabled %}
      - name: connect-secret
        secret:
          secretName: {{ connect_secret_name }}
{% endif %}
{% if useExternalMongoDB %}
      - name: mongodb-credentials
        secret:
          secretName: {{ mongodb_credentials_name }}
{% endif %}
{% if useExternalElasticsearch %}
      - name: elasticsearch-credentials
        secret:
          secretName: {{ elasticsearch_credentials_name }}
{% endif %}
{% if useKafkaForStream %}
      - name: kafka-credentials
        secret:
          secretName: {{ kafka_credentials_name }}
{% endif %}
{% if use_front_ssl_proxy and nuxeo_type == "interactive" %}
      - name: nginx-conf
        configMap:
          name: {{ nginx_configmap_name }}
      - name: nginx-cert
        secret:
          secretName: {{ nginx_secret_name}}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-tmp
        emptyDir: {}
{% endif %}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
  - type: ConfigChange